// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CallForFundsProxy extends ethereum.SmartContract {
  static bind(address: Address): CallForFundsProxy {
    return new CallForFundsProxy("CallForFundsProxy", address);
  }

  _cfa(): Address {
    let result = super.call("_cfa", "_cfa():(address)", []);

    return result[0].toAddress();
  }

  try__cfa(): ethereum.CallResult<Address> {
    let result = super.tryCall("_cfa", "_cfa():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _dai(): Address {
    let result = super.call("_dai", "_dai():(address)", []);

    return result[0].toAddress();
  }

  try__dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("_dai", "_dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _daix(): Address {
    let result = super.call("_daix", "_daix():(address)", []);

    return result[0].toAddress();
  }

  try__daix(): ethereum.CallResult<Address> {
    let result = super.tryCall("_daix", "_daix():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _ethx(): Address {
    let result = super.call("_ethx", "_ethx():(address)", []);

    return result[0].toAddress();
  }

  try__ethx(): ethereum.CallResult<Address> {
    let result = super.tryCall("_ethx", "_ethx():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _host(): Address {
    let result = super.call("_host", "_host():(address)", []);

    return result[0].toAddress();
  }

  try__host(): ethereum.CallResult<Address> {
    let result = super.tryCall("_host", "_host():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  category(): string {
    let result = super.call("category", "category():(string)", []);

    return result[0].toString();
  }

  try_category(): ethereum.CallResult<string> {
    let result = super.tryCall("category", "category():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deliverableMedium(): string {
    let result = super.call(
      "deliverableMedium",
      "deliverableMedium():(string)",
      []
    );

    return result[0].toString();
  }

  try_deliverableMedium(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "deliverableMedium",
      "deliverableMedium():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  deliverableURI(): string {
    let result = super.call("deliverableURI", "deliverableURI():(string)", []);

    return result[0].toString();
  }

  try_deliverableURI(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "deliverableURI",
      "deliverableURI():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  fundingState(): i32 {
    let result = super.call("fundingState", "fundingState():(uint8)", []);

    return result[0].toI32();
  }

  try_fundingState(): ethereum.CallResult<i32> {
    let result = super.tryCall("fundingState", "fundingState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  genre(): string {
    let result = super.call("genre", "genre():(string)", []);

    return result[0].toString();
  }

  try_genre(): ethereum.CallResult<string> {
    let result = super.tryCall("genre", "genre():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  image(): string {
    let result = super.call("image", "image():(string)", []);

    return result[0].toString();
  }

  try_image(): ethereum.CallResult<string> {
    let result = super.tryCall("image", "image():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  loudverseAdmin(): Address {
    let result = super.call("loudverseAdmin", "loudverseAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_loudverseAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "loudverseAdmin",
      "loudverseAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minFundingAmount(): BigInt {
    let result = super.call(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minFundingAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subgenre(): string {
    let result = super.call("subgenre", "subgenre():(string)", []);

    return result[0].toString();
  }

  try_subgenre(): ethereum.CallResult<string> {
    let result = super.tryCall("subgenre", "subgenre():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timelineInDays(): BigInt {
    let result = super.call("timelineInDays", "timelineInDays():(uint96)", []);

    return result[0].toBigInt();
  }

  try_timelineInDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelineInDays",
      "timelineInDays():(uint96)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  title(): string {
    let result = super.call("title", "title():(string)", []);

    return result[0].toString();
  }

  try_title(): ethereum.CallResult<string> {
    let result = super.tryCall("title", "title():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  videoUri(): string {
    let result = super.call("videoUri", "videoUri():(string)", []);

    return result[0].toString();
  }

  try_videoUri(): ethereum.CallResult<string> {
    let result = super.tryCall("videoUri", "videoUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get creator_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get title_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description_(): string {
    return this._call.inputValues[2].value.toString();
  }

  get image_(): string {
    return this._call.inputValues[3].value.toString();
  }

  get category_(): string {
    return this._call.inputValues[4].value.toString();
  }

  get genre_(): string {
    return this._call.inputValues[5].value.toString();
  }

  get subgenre_(): string {
    return this._call.inputValues[6].value.toString();
  }

  get deliverableMedium_(): string {
    return this._call.inputValues[7].value.toString();
  }

  get timelineInDays_(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get minFundingAmount_(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }

  get videoUri_(): string {
    return this._call.inputValues[10].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}
