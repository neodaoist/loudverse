// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class CallMatched extends ethereum.Event {
  get params(): CallMatched__Params {
    return new CallMatched__Params(this);
  }
}

export class CallMatched__Params {
  _event: CallMatched;

  constructor(event: CallMatched) {
    this._event = event;
  }

  get amountMatched(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ContributionReceivedETH extends ethereum.Event {
  get params(): ContributionReceivedETH__Params {
    return new ContributionReceivedETH__Params(this);
  }
}

export class ContributionReceivedETH__Params {
  _event: ContributionReceivedETH;

  constructor(event: ContributionReceivedETH) {
    this._event = event;
  }

  get donator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundingStateChanged extends ethereum.Event {
  get params(): FundingStateChanged__Params {
    return new FundingStateChanged__Params(this);
  }
}

export class FundingStateChanged__Params {
  _event: FundingStateChanged;

  constructor(event: FundingStateChanged) {
    this._event = event;
  }

  get newFundingState(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class RefundCompleted extends ethereum.Event {
  get params(): RefundCompleted__Params {
    return new RefundCompleted__Params(this);
  }
}

export class RefundCompleted__Params {
  _event: RefundCompleted;

  constructor(event: RefundCompleted) {
    this._event = event;
  }

  get addresses(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amounts(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class WorkDelivered extends ethereum.Event {
  get params(): WorkDelivered__Params {
    return new WorkDelivered__Params(this);
  }
}

export class WorkDelivered__Params {
  _event: WorkDelivered;

  constructor(event: WorkDelivered) {
    this._event = event;
  }

  get deliverableURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class CallForFundsLogic extends ethereum.SmartContract {
  static bind(address: Address): CallForFundsLogic {
    return new CallForFundsLogic("CallForFundsLogic", address);
  }

  _cfa(): Address {
    let result = super.call("_cfa", "_cfa():(address)", []);

    return result[0].toAddress();
  }

  try__cfa(): ethereum.CallResult<Address> {
    let result = super.tryCall("_cfa", "_cfa():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _dai(): Address {
    let result = super.call("_dai", "_dai():(address)", []);

    return result[0].toAddress();
  }

  try__dai(): ethereum.CallResult<Address> {
    let result = super.tryCall("_dai", "_dai():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _daix(): Address {
    let result = super.call("_daix", "_daix():(address)", []);

    return result[0].toAddress();
  }

  try__daix(): ethereum.CallResult<Address> {
    let result = super.tryCall("_daix", "_daix():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _ethx(): Address {
    let result = super.call("_ethx", "_ethx():(address)", []);

    return result[0].toAddress();
  }

  try__ethx(): ethereum.CallResult<Address> {
    let result = super.tryCall("_ethx", "_ethx():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  _host(): Address {
    let result = super.call("_host", "_host():(address)", []);

    return result[0].toAddress();
  }

  try__host(): ethereum.CallResult<Address> {
    let result = super.tryCall("_host", "_host():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  category(): string {
    let result = super.call("category", "category():(string)", []);

    return result[0].toString();
  }

  try_category(): ethereum.CallResult<string> {
    let result = super.tryCall("category", "category():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  crowdCommission(): Address {
    let result = super.call(
      "crowdCommission",
      "crowdCommission():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_crowdCommission(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "crowdCommission",
      "crowdCommission():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deliverableMedium(): string {
    let result = super.call(
      "deliverableMedium",
      "deliverableMedium():(string)",
      []
    );

    return result[0].toString();
  }

  try_deliverableMedium(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "deliverableMedium",
      "deliverableMedium():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  deliverableURI(): string {
    let result = super.call("deliverableURI", "deliverableURI():(string)", []);

    return result[0].toString();
  }

  try_deliverableURI(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "deliverableURI",
      "deliverableURI():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  factory(): Address {
    let result = super.call("factory", "factory():(address)", []);

    return result[0].toAddress();
  }

  try_factory(): ethereum.CallResult<Address> {
    let result = super.tryCall("factory", "factory():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  fundingState(): i32 {
    let result = super.call("fundingState", "fundingState():(uint8)", []);

    return result[0].toI32();
  }

  try_fundingState(): ethereum.CallResult<i32> {
    let result = super.tryCall("fundingState", "fundingState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  genre(): string {
    let result = super.call("genre", "genre():(string)", []);

    return result[0].toString();
  }

  try_genre(): ethereum.CallResult<string> {
    let result = super.tryCall("genre", "genre():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  image(): string {
    let result = super.call("image", "image():(string)", []);

    return result[0].toString();
  }

  try_image(): ethereum.CallResult<string> {
    let result = super.tryCall("image", "image():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  loudverseAdmin(): Address {
    let result = super.call("loudverseAdmin", "loudverseAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_loudverseAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "loudverseAdmin",
      "loudverseAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minFundingAmount(): BigInt {
    let result = super.call(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minFundingAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  smartArt(): Address {
    let result = super.call("smartArt", "smartArt():(address)", []);

    return result[0].toAddress();
  }

  try_smartArt(): ethereum.CallResult<Address> {
    let result = super.tryCall("smartArt", "smartArt():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  subgenre(): string {
    let result = super.call("subgenre", "subgenre():(string)", []);

    return result[0].toString();
  }

  try_subgenre(): ethereum.CallResult<string> {
    let result = super.tryCall("subgenre", "subgenre():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timelineInDays(): BigInt {
    let result = super.call("timelineInDays", "timelineInDays():(uint96)", []);

    return result[0].toBigInt();
  }

  try_timelineInDays(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "timelineInDays",
      "timelineInDays():(uint96)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  title(): string {
    let result = super.call("title", "title():(string)", []);

    return result[0].toString();
  }

  try_title(): ethereum.CallResult<string> {
    let result = super.tryCall("title", "title():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  videoUri(): string {
    let result = super.call("videoUri", "videoUri():(string)", []);

    return result[0].toString();
  }

  try_videoUri(): ethereum.CallResult<string> {
    let result = super.tryCall("videoUri", "videoUri():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get crowdCommission_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get smartArt_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DeliverCall extends ethereum.Call {
  get inputs(): DeliverCall__Inputs {
    return new DeliverCall__Inputs(this);
  }

  get outputs(): DeliverCall__Outputs {
    return new DeliverCall__Outputs(this);
  }
}

export class DeliverCall__Inputs {
  _call: DeliverCall;

  constructor(call: DeliverCall) {
    this._call = call;
  }

  get deliverableURI_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get slicerAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeliverCall__Outputs {
  _call: DeliverCall;

  constructor(call: DeliverCall) {
    this._call = call;
  }
}

export class MatchCallForFundsCall extends ethereum.Call {
  get inputs(): MatchCallForFundsCall__Inputs {
    return new MatchCallForFundsCall__Inputs(this);
  }

  get outputs(): MatchCallForFundsCall__Outputs {
    return new MatchCallForFundsCall__Outputs(this);
  }
}

export class MatchCallForFundsCall__Inputs {
  _call: MatchCallForFundsCall;

  constructor(call: MatchCallForFundsCall) {
    this._call = call;
  }

  get funders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MatchCallForFundsCall__Outputs {
  _call: MatchCallForFundsCall;

  constructor(call: MatchCallForFundsCall) {
    this._call = call;
  }
}

export class MintCrowdCommissionCall extends ethereum.Call {
  get inputs(): MintCrowdCommissionCall__Inputs {
    return new MintCrowdCommissionCall__Inputs(this);
  }

  get outputs(): MintCrowdCommissionCall__Outputs {
    return new MintCrowdCommissionCall__Outputs(this);
  }
}

export class MintCrowdCommissionCall__Inputs {
  _call: MintCrowdCommissionCall;

  constructor(call: MintCrowdCommissionCall) {
    this._call = call;
  }

  get funders(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class MintCrowdCommissionCall__Outputs {
  _call: MintCrowdCommissionCall;

  constructor(call: MintCrowdCommissionCall) {
    this._call = call;
  }
}

export class MintSmartArtCall extends ethereum.Call {
  get inputs(): MintSmartArtCall__Inputs {
    return new MintSmartArtCall__Inputs(this);
  }

  get outputs(): MintSmartArtCall__Outputs {
    return new MintSmartArtCall__Outputs(this);
  }
}

export class MintSmartArtCall__Inputs {
  _call: MintSmartArtCall;

  constructor(call: MintSmartArtCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get royaltyRecipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get royaltyValue(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class MintSmartArtCall__Outputs {
  _call: MintSmartArtCall;

  constructor(call: MintSmartArtCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class SetFactoryCall extends ethereum.Call {
  get inputs(): SetFactoryCall__Inputs {
    return new SetFactoryCall__Inputs(this);
  }

  get outputs(): SetFactoryCall__Outputs {
    return new SetFactoryCall__Outputs(this);
  }
}

export class SetFactoryCall__Inputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }

  get factoryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFactoryCall__Outputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class StartStreamCall extends ethereum.Call {
  get inputs(): StartStreamCall__Inputs {
    return new StartStreamCall__Inputs(this);
  }

  get outputs(): StartStreamCall__Outputs {
    return new StartStreamCall__Outputs(this);
  }
}

export class StartStreamCall__Inputs {
  _call: StartStreamCall;

  constructor(call: StartStreamCall) {
    this._call = call;
  }
}

export class StartStreamCall__Outputs {
  _call: StartStreamCall;

  constructor(call: StartStreamCall) {
    this._call = call;
  }
}
