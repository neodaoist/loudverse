// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ContributionReceivedETH extends ethereum.Event {
  get params(): ContributionReceivedETH__Params {
    return new ContributionReceivedETH__Params(this);
  }
}

export class ContributionReceivedETH__Params {
  _event: ContributionReceivedETH;

  constructor(event: ContributionReceivedETH) {
    this._event = event;
  }

  get donator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class GrantLogic extends ethereum.SmartContract {
  static bind(address: Address): GrantLogic {
    return new GrantLogic("GrantLogic", address);
  }

  category(): string {
    let result = super.call("category", "category():(string)", []);

    return result[0].toString();
  }

  try_category(): ethereum.CallResult<string> {
    let result = super.tryCall("category", "category():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deliverableFormat(): string {
    let result = super.call(
      "deliverableFormat",
      "deliverableFormat():(string)",
      []
    );

    return result[0].toString();
  }

  try_deliverableFormat(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "deliverableFormat",
      "deliverableFormat():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  fundingState(): i32 {
    let result = super.call("fundingState", "fundingState():(uint8)", []);

    return result[0].toI32();
  }

  try_fundingState(): ethereum.CallResult<i32> {
    let result = super.tryCall("fundingState", "fundingState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  genre(): string {
    let result = super.call("genre", "genre():(string)", []);

    return result[0].toString();
  }

  try_genre(): ethereum.CallResult<string> {
    let result = super.tryCall("genre", "genre():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  logicAddress(): Address {
    let result = super.call("logicAddress", "logicAddress():(address)", []);

    return result[0].toAddress();
  }

  try_logicAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("logicAddress", "logicAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minFundingAmount(): BigInt {
    let result = super.call(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minFundingAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  timeline(): i32 {
    let result = super.call("timeline", "timeline():(uint8)", []);

    return result[0].toI32();
  }

  try_timeline(): ethereum.CallResult<i32> {
    let result = super.tryCall("timeline", "timeline():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  title(): string {
    let result = super.call("title", "title():(string)", []);

    return result[0].toString();
  }

  try_title(): ethereum.CallResult<string> {
    let result = super.tryCall("title", "title():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}
