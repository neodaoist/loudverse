// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BurnBatch extends ethereum.Event {
  get params(): BurnBatch__Params {
    return new BurnBatch__Params(this);
  }
}

export class BurnBatch__Params {
  _event: BurnBatch;

  constructor(event: BurnBatch) {
    this._event = event;
  }

  get burner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class BurnSingle extends ethereum.Event {
  get params(): BurnSingle__Params {
    return new BurnSingle__Params(this);
  }
}

export class BurnSingle__Params {
  _event: BurnSingle;

  constructor(event: BurnSingle) {
    this._event = event;
  }

  get burner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class CallMatched extends ethereum.Event {
  get params(): CallMatched__Params {
    return new CallMatched__Params(this);
  }
}

export class CallMatched__Params {
  _event: CallMatched;

  constructor(event: CallMatched) {
    this._event = event;
  }

  get amountMatched(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ContributionReceivedETH extends ethereum.Event {
  get params(): ContributionReceivedETH__Params {
    return new ContributionReceivedETH__Params(this);
  }
}

export class ContributionReceivedETH__Params {
  _event: ContributionReceivedETH;

  constructor(event: ContributionReceivedETH) {
    this._event = event;
  }

  get donator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class FundingStateChanged extends ethereum.Event {
  get params(): FundingStateChanged__Params {
    return new FundingStateChanged__Params(this);
  }
}

export class FundingStateChanged__Params {
  _event: FundingStateChanged;

  constructor(event: FundingStateChanged) {
    this._event = event;
  }

  get newFundingState(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class MintBatch extends ethereum.Event {
  get params(): MintBatch__Params {
    return new MintBatch__Params(this);
  }
}

export class MintBatch__Params {
  _event: MintBatch;

  constructor(event: MintBatch) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }
}

export class MintSingle extends ethereum.Event {
  get params(): MintSingle__Params {
    return new MintSingle__Params(this);
  }
}

export class MintSingle__Params {
  _event: MintSingle;

  constructor(event: MintSingle) {
    this._event = event;
  }

  get minter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RefundCompleted extends ethereum.Event {
  get params(): RefundCompleted__Params {
    return new RefundCompleted__Params(this);
  }
}

export class RefundCompleted__Params {
  _event: RefundCompleted;

  constructor(event: RefundCompleted) {
    this._event = event;
  }

  get addresses(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get amounts(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class StreamStarted extends ethereum.Event {
  get params(): StreamStarted__Params {
    return new StreamStarted__Params(this);
  }
}

export class StreamStarted__Params {
  _event: StreamStarted;

  constructor(event: StreamStarted) {
    this._event = event;
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get value(): string {
    return this._event.parameters[1].value.toString();
  }
}

export class WorkDelivered extends ethereum.Event {
  get params(): WorkDelivered__Params {
    return new WorkDelivered__Params(this);
  }
}

export class WorkDelivered__Params {
  _event: WorkDelivered;

  constructor(event: WorkDelivered) {
    this._event = event;
  }

  get deliverableURI(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class CallForFundsLogic extends ethereum.SmartContract {
  static bind(address: Address): CallForFundsLogic {
    return new CallForFundsLogic("CallForFundsLogic", address);
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  category(): string {
    let result = super.call("category", "category():(string)", []);

    return result[0].toString();
  }

  try_category(): ethereum.CallResult<string> {
    let result = super.tryCall("category", "category():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deliverableMedium(): string {
    let result = super.call(
      "deliverableMedium",
      "deliverableMedium():(string)",
      []
    );

    return result[0].toString();
  }

  try_deliverableMedium(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "deliverableMedium",
      "deliverableMedium():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  deliverableURI(): string {
    let result = super.call("deliverableURI", "deliverableURI():(string)", []);

    return result[0].toString();
  }

  try_deliverableURI(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "deliverableURI",
      "deliverableURI():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  description(): string {
    let result = super.call("description", "description():(string)", []);

    return result[0].toString();
  }

  try_description(): ethereum.CallResult<string> {
    let result = super.tryCall("description", "description():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  fundingState(): i32 {
    let result = super.call("fundingState", "fundingState():(uint8)", []);

    return result[0].toI32();
  }

  try_fundingState(): ethereum.CallResult<i32> {
    let result = super.tryCall("fundingState", "fundingState():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  genre(): string {
    let result = super.call("genre", "genre():(string)", []);

    return result[0].toString();
  }

  try_genre(): ethereum.CallResult<string> {
    let result = super.tryCall("genre", "genre():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  image(): string {
    let result = super.call("image", "image():(string)", []);

    return result[0].toString();
  }

  try_image(): ethereum.CallResult<string> {
    let result = super.tryCall("image", "image():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  issuer(): Address {
    let result = super.call("issuer", "issuer():(address)", []);

    return result[0].toAddress();
  }

  try_issuer(): ethereum.CallResult<Address> {
    let result = super.tryCall("issuer", "issuer():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  loudverseAdmin(): Address {
    let result = super.call("loudverseAdmin", "loudverseAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_loudverseAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "loudverseAdmin",
      "loudverseAdmin():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  minFundingAmount(): BigInt {
    let result = super.call(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_minFundingAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "minFundingAmount",
      "minFundingAmount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  subgenre(): string {
    let result = super.call("subgenre", "subgenre():(string)", []);

    return result[0].toString();
  }

  try_subgenre(): ethereum.CallResult<string> {
    let result = super.tryCall("subgenre", "subgenre():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  timelineInDays(): i32 {
    let result = super.call("timelineInDays", "timelineInDays():(uint8)", []);

    return result[0].toI32();
  }

  try_timelineInDays(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "timelineInDays",
      "timelineInDays():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  title(): string {
    let result = super.call("title", "title():(string)", []);

    return result[0].toString();
  }

  try_title(): ethereum.CallResult<string> {
    let result = super.tryCall("title", "title():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(id: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);

    return result[0].toString();
  }

  try_tokenURI(id: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deleteURI(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get deleteURI(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class DeliverCall extends ethereum.Call {
  get inputs(): DeliverCall__Inputs {
    return new DeliverCall__Inputs(this);
  }

  get outputs(): DeliverCall__Outputs {
    return new DeliverCall__Outputs(this);
  }
}

export class DeliverCall__Inputs {
  _call: DeliverCall;

  constructor(call: DeliverCall) {
    this._call = call;
  }

  get deliverableURI_(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class DeliverCall__Outputs {
  _call: DeliverCall;

  constructor(call: DeliverCall) {
    this._call = call;
  }
}

export class MatchCallForFundsCall extends ethereum.Call {
  get inputs(): MatchCallForFundsCall__Inputs {
    return new MatchCallForFundsCall__Inputs(this);
  }

  get outputs(): MatchCallForFundsCall__Outputs {
    return new MatchCallForFundsCall__Outputs(this);
  }
}

export class MatchCallForFundsCall__Inputs {
  _call: MatchCallForFundsCall;

  constructor(call: MatchCallForFundsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MatchCallForFundsCall__Outputs {
  _call: MatchCallForFundsCall;

  constructor(call: MatchCallForFundsCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get uri(): string {
    return this._call.inputValues[3].value.toString();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class MintBatchCall extends ethereum.Call {
  get inputs(): MintBatchCall__Inputs {
    return new MintBatchCall__Inputs(this);
  }

  get outputs(): MintBatchCall__Outputs {
    return new MintBatchCall__Outputs(this);
  }
}

export class MintBatchCall__Inputs {
  _call: MintBatchCall;

  constructor(call: MintBatchCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get uris(): Array<string> {
    return this._call.inputValues[3].value.toStringArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class MintBatchCall__Outputs {
  _call: MintBatchCall;

  constructor(call: MintBatchCall) {
    this._call = call;
  }
}

export class MintCryptoCredentialCall extends ethereum.Call {
  get inputs(): MintCryptoCredentialCall__Inputs {
    return new MintCryptoCredentialCall__Inputs(this);
  }

  get outputs(): MintCryptoCredentialCall__Outputs {
    return new MintCryptoCredentialCall__Outputs(this);
  }
}

export class MintCryptoCredentialCall__Inputs {
  _call: MintCryptoCredentialCall;

  constructor(call: MintCryptoCredentialCall) {
    this._call = call;
  }

  get creator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get creationTitle(): string {
    return this._call.inputValues[3].value.toString();
  }

  get skill(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get totalFunding(): string {
    return this._call.inputValues[5].value.toString();
  }

  get totalFunders(): string {
    return this._call.inputValues[6].value.toString();
  }
}

export class MintCryptoCredentialCall__Outputs {
  _call: MintCryptoCredentialCall;

  constructor(call: MintCryptoCredentialCall) {
    this._call = call;
  }
}

export class RefundCall extends ethereum.Call {
  get inputs(): RefundCall__Inputs {
    return new RefundCall__Inputs(this);
  }

  get outputs(): RefundCall__Outputs {
    return new RefundCall__Outputs(this);
  }
}

export class RefundCall__Inputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }

  get addresses(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class RefundCall__Outputs {
  _call: RefundCall;

  constructor(call: RefundCall) {
    this._call = call;
  }
}

export class SetBaseURICall extends ethereum.Call {
  get inputs(): SetBaseURICall__Inputs {
    return new SetBaseURICall__Inputs(this);
  }

  get outputs(): SetBaseURICall__Outputs {
    return new SetBaseURICall__Outputs(this);
  }
}

export class SetBaseURICall__Inputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }

  get newBaseURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetBaseURICall__Outputs {
  _call: SetBaseURICall;

  constructor(call: SetBaseURICall) {
    this._call = call;
  }
}

export class SetIssuerCall extends ethereum.Call {
  get inputs(): SetIssuerCall__Inputs {
    return new SetIssuerCall__Inputs(this);
  }

  get outputs(): SetIssuerCall__Outputs {
    return new SetIssuerCall__Outputs(this);
  }
}

export class SetIssuerCall__Inputs {
  _call: SetIssuerCall;

  constructor(call: SetIssuerCall) {
    this._call = call;
  }

  get newIssuer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetIssuerCall__Outputs {
  _call: SetIssuerCall;

  constructor(call: SetIssuerCall) {
    this._call = call;
  }
}

export class StartStreamCall extends ethereum.Call {
  get inputs(): StartStreamCall__Inputs {
    return new StartStreamCall__Inputs(this);
  }

  get outputs(): StartStreamCall__Outputs {
    return new StartStreamCall__Outputs(this);
  }
}

export class StartStreamCall__Inputs {
  _call: StartStreamCall;

  constructor(call: StartStreamCall) {
    this._call = call;
  }
}

export class StartStreamCall__Outputs {
  _call: StartStreamCall;

  constructor(call: StartStreamCall) {
    this._call = call;
  }
}
